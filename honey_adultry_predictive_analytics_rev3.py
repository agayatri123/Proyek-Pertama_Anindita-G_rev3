# -*- coding: utf-8 -*-
"""Honey_Adultry_predictive_analytics_rev3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xdKOcJc-u-ZC2OHN2Z5UqmpVXBnahgrA

# **Predictive Analytics: Honey Adultery With K-Nearest Neighbour, Random Forest and Boosting Algoritm**

**Nama: Anindita Gayatri
**Email:agayatri123@yahoo.co.id
**ID Dicoding:anindita_gayatri_ukA6

# **1. Data Loading**

Meng-import library-library yang dibutuhkan. Lalu coding berikutnya mengecheck jumlah data baris dan kolom yang ternyata terdiri dari 247.903 baris data dan 11 kolom jenis data.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
# %matplotlib inline
import seaborn as sns

# load the dataset
data = pd.read_csv('sample_data/honey_purity_dataset.csv')

# Data dimension
data_shape = data.shape
print("Data Dimensions:", data_shape)

"""
# **1.1. Check isi per kolom**
Di-check lebih lanjut dari 11 kolom tersebut berisi kelompok data apa saja dan jenis datanya, yang ternyata berisi: CS, Density, WC, pH, EC, F, G, Viscosity, Purity, Price. Juga ternyata 10 kolom data numeric & 1 data alphanumeric."""

data.info()

"""# **1.2. Melihat Sebaran Data**
Melihat lebih mendalam tentang sebaran seluruh isi data 247.903 data tersebut melalui nilai tengah, kuartil atas & bawah, dsb.
"""

data.describe()

"""# **2. Menangani Missing Value**

# **2.1. Men-check Nilai Kolom Mana Yang Kosong dan berapa pcs per Kolom nya.**
Dimulai dari men-check nilai nol/kosong di tiap cell dataset.
"""

CS = (data.CS == 0).sum()
Density = (data.Density == 0).sum()
WC = (data.WC == 0).sum()
pH = (data.pH == 0).sum()
EC = (data.WC == 0).sum()
F = (data.F == 0).sum()
G = (data.G == 0).sum()
Viscosity = (data.Viscosity == 0).sum()
Purity = (data.Purity == 0).sum()
Price = (data.Price == 0).sum()

print("Nilai 0 di kolom CS ada: ", CS)
print("Nilai 0 di kolom Density ada: ", Density)
print("Nilai 0 di kolom WC ada: ", WC)
print("Nilai 0 di kolom pH ada: ", pH)
print("Nilai 0 di kolom EC ada: ", EC)
print("Nilai 0 di kolom F ada: ", F)
print("Nilai 0 di kolom G ada: ", G)
print("Nilai 0 di kolom Viscosity ada: ", Viscosity)
print("Nilai 0 di kolom Purity ada: ", Purity)
print("Nilai 0 di kolom Price ada: ", Price)

"""# **2.2. Men-drop Data Yang Kosong**
Walau sebenarnya data dari coding di atas tidak ditemukan nilai nol/kosong, namun tetap dilakukan coding berikut untuk men-drop nilai yang nol/kosong. Terlihat karena sejak awal data tidak ada yg nol/kosong, maka setelah di-drop data yg nol/kosong maka jumlah data tetap tidak berkurang) yaitu 247.903 data.
"""

# Drop baris dengan nilai 'x', 'y', dan 'z' = 0
data = data.loc[(data[['CS','Density','WC','pH','EC','F','G','Viscosity','Purity','Price']]!=0).all(axis=1)]

# Cek ukuran data untuk memastikan baris sudah di-drop
data.shape

"""# **3. Menangani Outliers**

Melihat seandainya ada data yang outliers atau keluar jauh dari data yang lain. Digunakan IQR Method (Inter Quartile Range) yaitu dalam range quartil atas & bawah (Q1 hingga Q3). Ditampilkan dalam bentuk visualisasi boxplot, ternyata tidak ada outliers dari beberapa contoh yaitu data CS, Density dan WS.

# **3.1. Check Outliers Pada Kolom CS**
"""

sns.boxplot(x=data['CS'])

"""# **3.2. Check Outliers Pada Kolom Density**"""

sns.boxplot(x=data['Density'])

"""# **3.3. Check Outliers Pada Kolom WC**"""

sns.boxplot(x=data['WC'])

"""# **4. Pengelompokan Data dengan Univariate Analysis**

Berdasar hasil coding: data.info() di atas telah diketahui mana yg numeric & bukan. Di coding ini kita akan melakukan proses analisis data dengan teknik Univariate EDA mengelompokkan data numeric berbeda dari data non-numeric.
"""

numerical_features = ['CS', 'Density', 'WC', 'pH', 'EC', 'F', 'G', 'Viscosity', 'Purity', 'Price']
categorical_features = ['Pollen_analysis']

"""Plooting EDA analysis pertama untuk kelompok non-numeric yang hanya berisi "Pollen Analysis" (1 kolom data)."""

feature = categorical_features[0]
count = data[feature].value_counts()
percent = 100*data[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature);

"""Plooting EDA analysis kedua ini untuk kelompok numeric (11 kolom data).

# **4.1. Numerical Features**
"""

data.hist(bins=50, figsize=(20,15))
plt.show()

"""# **4.2. Melihat hubungan antara Purity dengan Jenis Pollen.**

Dilakukan Multivariate EDA untuk menunjukkan hubungan antara Purity terhadap jenis pollen. Ternyata rata-rata sumber jenis pollen madu memiliki purity (kemurnian) yang sama.
"""

#cat_features = data.select_dtypes(include='object').columns.to_list()
cat_features = ['Pollen_analysis']

print(cat_features)

for col in cat_features:
  sns.catplot(x=col, y="Purity", kind="bar", dodge=False, height = 4, aspect = 3,  data=data, palette="Set3")
  plt.title("Rata-rata 'Purity' Relatif terhadap - {}".format(col))

"""Mengamati hubungan antara fitur numerik dengan coding berikut."""

# Mengamati hubungan antar fitur numerik dengan fungsi pairplot()
sns.pairplot(data, diag_kind = 'kde')

"""melakukan correlation Matrix untuk melihat tingkat korelasi antar data. Ternyata purity & price memiliki kolerasi tertinggi yang paling menjauhi nilai nol. Sedang EC, F dan G paling tidak memiliki korelasi terhadap data yang lain.

# **4.3. Buat Diagram Heatmap**
"""

plt.figure(figsize=(10, 8))
correlation_matrix = data[numerical_features].corr().round(2)

# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Kolom EC, F dan G yang paling tidak memiliki korelasi kemudian di-drop dari dataset."""

data.drop(['EC', 'F', 'G'], inplace=True, axis=1)
data.head()

"""Dilakukan one-hot-encoding untuk data Pollen_analysis karena non-numeric."""

from sklearn.preprocessing import  OneHotEncoder
data = pd.concat([data, pd.get_dummies(data['Pollen_analysis'], prefix='Pollen_analysis')],axis=1)
data.drop(['Pollen_analysis'], axis=1, inplace=True)
data.head()

"""# **5. Pemisahan Data Training dengan Data Test memakai Train Test Split**

Membagi dataset menjadi data latih (train) 70% dan data uji (test) 30%.
"""

from sklearn.model_selection import train_test_split

X = data.drop(["Purity"],axis =1)
y = data["Purity"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 123)

"""Cek jumlah sampel pada masing-masing bagian dimana ada 47.194 total data terbagi atas 42.474 data train dan 4.720 data test."""

print(f'Total # of sample in whole dataset: {len(X)}')
print(f'Total # of sample in train dataset: {len(X_train)}')
print(f'Total # of sample in test dataset: {len(X_test)}')

"""# **6. Standarisasi Untuk Menjadi Data Yang Mudah diolah**

Coding standarisasi membantu untuk membuat fitur data menjadi bentuk yang lebih mudah diolah oleh algoritma dan menghindari kebocoran informasi pada data uji.
"""

from sklearn.preprocessing import StandardScaler

numerical_features = ['CS', 'Density', 'WC','pH','Viscosity','Price']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""Proses standarisasi mengubah nilai rata-rata (mean) menjadi 0 dan nilai standar deviasi menjadi 1."""

X_train[numerical_features].describe().round(4)

"""# **7. Membuat Pemodelan**

Menyiapkan data frame untuk analisis tiga model: KNN, RF dan Boosting Algoritm.
"""

# Siapkan dataframe untuk analisis model
models = pd.DataFrame(index=['train_mse', 'test_mse'],
                      columns=['KNN', 'RandomForest', 'Boosting'])

"""# **7.1. Coding untuk melatih data dengan KNN.**"""

# Model Development With K-Nearest Neighbour
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error

knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)

models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""# **7.2. Coding untuk melatih data dengan Random Forest.**"""

# Model Development With Random Forest
# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor

# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)

models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""# **7.3. Coding untuk melatih data dengan Boosting Algorithm.**"""

# Model Development With Boosting Algoritm
from sklearn.ensemble import AdaBoostRegressor

boosting = AdaBoostRegressor(learning_rate=0.05, random_state=55)
boosting.fit(X_train, y_train)
models.loc['train_mse','Boosting'] = mean_squared_error(y_pred=boosting.predict(X_train), y_true=y_train)

"""# **# 8. EVALUATION**

# **8.1. Lakukan proses scaling sebelum menghitung MSE.**
"""

# Lakukan scaling terhadap fitur numerik pada X_test sehingga memiliki rata-rata=0 dan varians=1
X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

"""# **8.2. Melakukan evaluasi ketiga model (KNN, RF & Boosting Algoritm) dengan metrik MSE.**"""

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF','Boosting'])

# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF, 'Boosting': boosting}

# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3

# Panggil mse
mse

"""# **8.3. Mem-plotting hasil evaluasi dalam bentuk grafik.**"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""
# **8.4. UJI AKURASI**
Menguji prediksi menggunakan beberapa harga dari data test. Ternyata KNN senilai 0,88 paling mendekati nilai y_true yang bernilai 0,88 (pembulatan 2 dibelakang koma)"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(2)

pd.DataFrame(pred_dict)